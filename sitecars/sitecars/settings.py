"""
Django settings for sitecars project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging.config
import os
import sys
import socket
from pathlib import Path
from dotenv import load_dotenv
from decouple import config

# ---------------------------- Initial Setup ---------------------------- #

# Load environment variables
load_dotenv()

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Extend Python path to include common directory
sys.path.append(os.path.join(BASE_DIR, 'common'))

# ---------------------------- Security Settings ---------------------------- #

SECRET_KEY = 'django-insecure-k20078$#n&--mcid55e^481&c4z)m(p3v*=si748mi$n1s@klq'
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

# ---------------------------- Internal IPs ---------------------------- #

INTERNAL_IPS = ['127.0.0.1']

# Add local network IP to INTERNAL_IPS
ip = socket.gethostbyname(socket.gethostname())
INTERNAL_IPS += [ip[:-1] + '1']

# ---------------------------- Installed Applications ---------------------------- #

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bestcar.apps.BestcarConfig',
    'django_elasticsearch_dsl',
    'users',
    'booking',
    'clear_cache',
    'common',
    'django_celery_results',
    'debug_toolbar',
]

# ---------------------------- Middleware ---------------------------- #

MIDDLEWARE = [
    'sitecars.middleware.LoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

# ---------------------------- URL Configuration ---------------------------- #

ROOT_URLCONF = 'sitecars.urls'

# ---------------------------- Templates ---------------------------- #

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ---------------------------- WSGI Application ---------------------------- #

WSGI_APPLICATION = 'sitecars.wsgi.application'

# ---------------------------- Database Configuration ---------------------------- #

DATABASES = {
    'default': {
        'ENGINE': 'common.logging',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='db'),
        'PORT': config('DB_PORT', cast=int, default=5432),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
    }
}

# ---------------------------- Authentication ---------------------------- #

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'users.authentication.AuthenticationUserBackend',
]

AUTH_USER_MODEL = 'users.User'

# ---------------------------- Internationalization ---------------------------- #

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ---------------------------- Static and Media Files ---------------------------- #

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'
DEFAULT_USER_IMAGE = MEDIA_URL + 'users/photo.jpg'

# ---------------------------- Login and Redirects ---------------------------- #

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'users:login'

# ---------------------------- Email Configuration ---------------------------- #

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = '465'
EMAIL_HOST_USER = 'pal3noa@yandex.ru'
EMAIL_HOST_PASSWORD = 'acqozotcczqitrre'
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER

# ---------------------------- Celery Configuration ---------------------------- #

REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', f'redis://{REDIS_HOST}:{REDIS_PORT}/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'django-db')
CELERY_ACCEPT_CONTENT = os.getenv('CELERY_ACCEPT_CONTENT', 'json').split(',')
CELERY_TASK_SERIALIZER = os.getenv('CELERY_TASK_SERIALIZER', 'json')
CELERY_TASK_TRACK_STARTED = os.getenv('CELERY_TASK_TRACK_STARTED', 'False') == 'True'
CELERY_TASK_IGNORE_RESULT = os.getenv('CELERY_TASK_IGNORE_RESULT', 'False') == 'True'

# ---------------------------- Logging Configuration ---------------------------- #

LOGGING_CONFIG = None
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'duration_request_view.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'duration_request_view': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
})

# ---------------------------- Elasticsearch Configuration ---------------------------- #

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': ['http://elasticsearch:9200'],
        'timeout': 60,
    }
}

# ---------------------------- Default Primary Key Field ---------------------------- #

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'